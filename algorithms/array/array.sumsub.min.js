/*
 * @title: sum of subarray mins
 * @description: sum of all minimum values of subarrays
 * @author: Thorsten Kober
 * @email: info@flashdesignory.com
 */

class Stack {
  constructor() {
    this.data = {};
    this.size = 0;
  }
  push(value) {
    this.data[this.size] = value;
    this.size++;
  }
  pop() {
    const temp = this.data[this.size  - 1];
    delete this.data[this.size - 1];
    this.size--;
    return temp;
  }

  peek() {
    return this.data[this.size - 1];
  }

  empty() {
    return this.size === 0;
  }
}

class Node {
  constructor(value, count) {
    this.value = value;
    this.count = count;
  }
}

function sumSubarrayMins(arr) {
  const MOD = 1000000007;
  let sum = 0;
  const left = [];
  const right = [];
  const stack1 = new Stack();
  const stack2 = new Stack();

  for (let i = 0; i < arr.length; i++) {
    let count = 1;
    while (!stack1.empty() && stack1.peek().value > arr[i]) {
      count += stack1.peek().count;
      stack1.pop();
    }
    stack1.push(new Node(arr[i], count));
    left[i] = count;
  }

  for (let i = arr.length - 1; i >= 0; i--) {
    let count = 1;
    while (!stack2.empty() && stack2.peek().value >= arr[i]) {
      count += stack2.peek().count;
      stack2.pop();
    }
    stack2.push(new Node(arr[i], count));
    right[i] = count;
  }

  for (let i = 0; i < arr.length; i++) {
    sum = (sum + arr[i] * left[i] * right[i]) % MOD;
  }
  return sum;
}

// npx jest algorithms/array/array.sumsub.min.js
test('sumSubarrayMins()', () => {
  expect(sumSubarrayMins([3,1,2,4])).toEqual(17);
});
